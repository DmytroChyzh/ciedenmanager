import { db } from './firebase';
import {
  collection,
  addDoc,
  serverTimestamp,
  getDocs,
  query,
  orderBy,
  onSnapshot,
  doc,
  getDoc,
  updateDoc,
  arrayUnion,
  increment,
} from 'firebase/firestore';

interface Message {
  text: string;
  sender: string;
  [key: string]: any;
}

interface Project {
  title: string;
  description: string;
  status: string;
  [key: string]: any;
}

export interface ChatSession {
  id: string;
  metadata: {
    sessionId: string;
    userId: string;
    userName: string;
    userEmail: string;
    status: 'active' | 'completed' | 'archived';
    startedAt: any;
    completedAt?: any;
    totalMessages: number;
    lastActivity: any;
  };
  messages: Message[];
  projectCard?: {
    title?: string;
    description?: string;
    type?: string;
    budget?: number;
    [key: string]: any;
  };
  createdAt: any;
  updatedAt: any;
}

export async function saveChat(projectId: string, message: Message) {
  try {
    const docRef = await addDoc(collection(db, 'messages'), {
      ...message,
      projectId,
      createdAt: serverTimestamp(),
    });
    return docRef.id;
  } catch (error) {
    console.error('Error saving chat message:', error);
    throw error;
  }
}

export async function createProject(userId: string, data: Project) {
  try {
    const docRef = await addDoc(collection(db, 'projects'), {
      userId,
      ...data,
      createdAt: serverTimestamp(),
      status: 'new', // Default status for new projects
    });
    return docRef.id;
  } catch (error) {
    console.error('Error creating project:', error);
    throw error;
  }
}

export async function getProjects() {
  try {
    const q = query(collection(db, 'projects'), orderBy('createdAt', 'desc'));
    const snapshot = await getDocs(q);
    return snapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data(),
    }));
  } catch (error) {
    console.error('Error getting projects:', error);
    throw error;
  }
}

// –ù–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ chatSessions
export async function getChatSessions() {
  try {
    const q = query(collection(db, 'chatSessions'), orderBy('metadata.lastActivity', 'desc'));
    const snapshot = await getDocs(q);
    return snapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data(),
    })) as ChatSession[];
  } catch (error) {
    console.error('Error getting chat sessions:', error);
    throw error;
  }
}

export function subscribeToChatSessions(callback: (sessions: ChatSession[]) => void) {
  console.log('üîç –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ chatSessions...');
  const q = query(collection(db, 'chatSessions'), orderBy('metadata.lastActivity', 'desc'));
  
  return onSnapshot(q, (snapshot) => {
    console.log('üìä –û—Ç—Ä–∏–º–∞–Ω–æ snapshot –∑ Firestore:', snapshot.size, '–¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤');
    const sessions = snapshot.docs.map(doc => {
      const data = doc.data();
      console.log('üìÑ –î–æ–∫—É–º–µ–Ω—Ç:', doc.id, data);
      return {
        id: doc.id,
        ...data,
      } as ChatSession;
    });
    
    console.log('‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–µ—Å—ñ—ó –≤ callback:', sessions.length);
    callback(sessions);
  }, (error) => {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ chatSessions:', error);
  });
}

export async function getChatSessionById(sessionId: string): Promise<ChatSession | null> {
  try {
    const docRef = doc(db, 'chatSessions', sessionId);
    const docSnap = await getDoc(docRef);
    
    if (docSnap.exists()) {
      return {
        id: docSnap.id,
        ...docSnap.data(),
      } as ChatSession;
    } else {
      return null;
    }
  } catch (error) {
    console.error('Error getting chat session:', error);
    throw error;
  }
}

export async function updateChatSessionStatus(sessionId: string, status: 'active' | 'completed' | 'archived') {
  try {
    const docRef = doc(db, 'chatSessions', sessionId);
    await updateDoc(docRef, {
      'metadata.status': status,
      'metadata.lastActivity': serverTimestamp(),
      updatedAt: serverTimestamp(),
    });
  } catch (error) {
    console.error('Error updating chat session status:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —á–∞—Ç-—Å–µ—Å—ñ—ó
export async function createChatSession(userData: {
  userName: string;
  userEmail: string;
  userId: string;
}, projectCard?: {
  title?: string;
  description?: string;
  type?: string;
  budget?: number;
}) {
  try {
    console.log('üöÄ –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É —á–∞—Ç-—Å–µ—Å—ñ—é –¥–ª—è:', userData);
    const sessionId = `session_${Date.now()}_${Math.random().toString(36).slice(2, 8)}`;
    
    const sessionData = {
      metadata: {
        sessionId,
        userId: userData.userId,
        userName: userData.userName,
        userEmail: userData.userEmail,
        status: 'active' as const,
        startedAt: serverTimestamp(),
        totalMessages: 0,
        lastActivity: serverTimestamp(),
      },
      messages: [],
      projectCard,
      createdAt: serverTimestamp(),
      updatedAt: serverTimestamp(),
    };

    console.log('üìù –î–∞–Ω—ñ —Å–µ—Å—ñ—ó:', sessionData);
    const docRef = await addDoc(collection(db, 'chatSessions'), sessionData);
    console.log('‚úÖ –°–µ—Å—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞ –∑ ID:', docRef.id);
    return docRef.id;
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Å—ñ—ó:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ —Å–µ—Å—ñ—ó
export async function addMessageToSession(sessionId: string, message: {
  text: string;
  sender: 'user' | 'assistant' | 'manager';
  timestamp?: any;
}) {
  try {
    const docRef = doc(db, 'chatSessions', sessionId);
    const messageData = {
      ...message,
      timestamp: message.timestamp || serverTimestamp(),
    };
    
    await updateDoc(docRef, {
      messages: arrayUnion(messageData),
      'metadata.totalMessages': increment(1),
      'metadata.lastActivity': serverTimestamp(),
      updatedAt: serverTimestamp(),
    });
  } catch (error) {
    console.error('Error adding message to session:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó —ñ—Å–Ω—É—é—á–∏—Ö —á–∞—Ç—ñ–≤ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
export async function migrateExistingChats() {
  try {
    const chatsSnapshot = await getDocs(collection(db, 'chats'));
    
    for (const chatDoc of chatsSnapshot.docs) {
      const chatData = chatDoc.data();
      
      // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É —Å–µ—Å—ñ—é
      const sessionId = await createChatSession({
        userName: chatData.contact?.name || '–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–ª—ñ—î–Ω—Ç',
        userEmail: chatData.contact?.email || 'no-email@example.com',
        userId: chatData.contact?.email || 'unknown',
      }, chatData.projectCard);

      // –ú—ñ–≥—Ä—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      if (chatData.messages && Array.isArray(chatData.messages)) {
        for (const msg of chatData.messages) {
          await addMessageToSession(sessionId, {
            text: msg.content || msg.text || '',
            sender: msg.role === 'user' ? 'user' : 
                   msg.role === 'manager' ? 'manager' : 'assistant',
            timestamp: msg.timestamp ? new Date(msg.timestamp) : undefined,
          });
        }
      }
    }
    
    console.log('Migration completed successfully');
  } catch (error) {
    console.error('Error during migration:', error);
    throw error;
  }
} 